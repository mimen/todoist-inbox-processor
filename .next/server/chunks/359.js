exports.id=359,exports.ids=[359],exports.modules={1051:(e,t,r)=>{"use strict";r.d(t,{Q:()=>s});let o=new(r(6204)).TodoistApi(process.env.TODOIST_API_KEY);class s{static async getProjects(){try{let e,t=await o.getProjects();return console.log("Projects response:",t),console.log("Projects response type:",typeof t),console.log("Projects response keys:",Object.keys(t||{})),e=Array.isArray(t)?t:t&&"object"==typeof t&&(t.data||t.items||t.projects||t.results)||[],console.log("Extracted projects:",e),console.log("Projects array length:",e.length),e.filter(e=>e&&e.id).map(e=>({id:e.id,name:e.name,color:e.color,isInboxProject:e.inboxProject||!1,parentId:e.parentId||void 0}))}catch(e){throw console.error("Error fetching projects:",e),Error("Failed to fetch projects")}}static async getLabels(){try{let e,t=await o.getLabels();return console.log("Labels response:",t),console.log("Labels response keys:",Object.keys(t||{})),e=Array.isArray(t)?t:t&&"object"==typeof t&&(t.data||t.items||t.labels||t.results)||[],console.log("Extracted labels:",e),e.filter(e=>e&&e.id).map(e=>({id:e.id,name:e.name,color:e.color}))}catch(e){throw console.error("Error fetching labels:",e),Error("Failed to fetch labels")}}static async getTasks(e){try{let t,r=e?await o.getTasks({filter:e}):await o.getTasks();return console.log("Tasks response:",r),console.log("Tasks response keys:",Object.keys(r||{})),t=Array.isArray(r)?r:r&&"object"==typeof r&&(r.data||r.items||r.tasks||r.results)||[],console.log("Extracted tasks:",t),t.filter(e=>e&&e.id).map(e=>({id:e.id,content:e.content,description:e.description||"",projectId:e.projectId,priority:e.priority,labels:e.labels||[],due:e.due?{date:e.due.date,string:e.due.string,datetime:e.due.datetime||void 0}:void 0,deadline:e.deadline?{date:e.deadline.date,string:e.deadline.string}:void 0,createdAt:e.createdAt,isCompleted:e.isCompleted||!1}))}catch(e){throw console.error("Error fetching tasks:",e),Error("Failed to fetch tasks")}}static async getInboxTasks(){return this.getTasks()}static async getProjectTasks(e){try{let t,r=await o.getTasks({projectId:e});return console.log(`Tasks response for project ${e}:`,r),t=Array.isArray(r)?r:r&&"object"==typeof r&&(r.data||r.items||r.tasks||r.results)||[],console.log(`Extracted tasks for project ${e}:`,t),t.filter(e=>e&&e.id).map(e=>({id:e.id,content:e.content,description:e.description||"",projectId:e.projectId,priority:e.priority,labels:e.labels||[],due:e.due?{date:e.due.date,string:e.due.string,datetime:e.due.datetime||void 0}:void 0,deadline:e.deadline?{date:e.deadline.date,string:e.deadline.string}:void 0,createdAt:e.createdAt,isCompleted:e.isCompleted||!1}))}catch(t){throw console.error(`Error fetching tasks for project ${e}:`,t),Error("Failed to fetch project tasks")}}static async moveTaskToProject(e,t){try{console.log("\uD83D\uDD04 Moving task via Sync API:",{taskId:e,projectId:t});let r=crypto.randomUUID(),o=await fetch("https://api.todoist.com/sync/v9/sync",{method:"POST",headers:{Authorization:`Bearer ${process.env.TODOIST_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify({commands:[{type:"item_move",args:{id:e,project_id:t},uuid:r}]})});if(!o.ok){let e=await o.text();throw console.error("Sync API move failed:",o.status,e),Error(`Sync API move failed: ${o.status} ${e}`)}let s=await o.json();if(console.log("✅ Sync API move result:",s),s.sync_status&&"ok"===s.sync_status[r])return console.log("✅ Task move confirmed successful"),!0;throw console.error("❌ Task move failed:",s.sync_status),Error(`Task move failed: ${JSON.stringify(s.sync_status)}`)}catch(e){throw console.error("❌ Sync API move error:",e),e}}static async updateTask(e,t){try{if(console.log("TodoistApiClient.updateTask called with:",{taskId:e,updates:t}),t.projectId&&""!==t.projectId)try{let r=await this.getProjects(),o=r.find(e=>e.id===t.projectId);if(!o)throw console.error("Target project not found:",t.projectId),console.log("Available projects:",r.map(e=>({id:e.id,name:e.name}))),Error(`Project with ID ${t.projectId} not found`);console.log("Target project found:",{id:o.id,name:o.name}),await this.moveTaskToProject(e,t.projectId)}catch(e){throw console.error("❌ Project move failed:",e),Error(`Failed to move task to project: ${e}`)}if(void 0!==t.deadline)try{console.log("\uD83D\uDD04 Updating deadline via Sync API:",{taskId:e,deadline:t.deadline});let r=crypto.randomUUID(),s=null;if(t.deadline)try{let e=await o.addTask({content:"temp",dueString:t.deadline});e.due&&(s={date:e.due.date}),await o.deleteTask(e.id)}catch(e){throw console.error("Failed to parse deadline date:",e),Error("Invalid deadline date format")}let a=await fetch("https://api.todoist.com/sync/v9/sync",{method:"POST",headers:{Authorization:`Bearer ${process.env.TODOIST_API_KEY}`,"Content-Type":"application/json"},body:JSON.stringify({commands:[{type:"item_update",args:{id:e,deadline:s},uuid:r}]})});if(!a.ok){let e=await a.text();throw console.error("Sync API deadline update failed:",a.status,e),Error(`Sync API deadline update failed: ${a.status} ${e}`)}let i=await a.json();if(console.log("✅ Sync API deadline result:",i),i.sync_status&&"ok"===i.sync_status[r])console.log("✅ Deadline update confirmed successful");else throw console.error("❌ Deadline update failed:",i.sync_status),Error(`Deadline update failed: ${JSON.stringify(i.sync_status)}`)}catch(e){throw console.error("❌ Deadline update error:",e),Error(`Failed to update deadline: ${e}`)}let r={};if(void 0!==t.content&&(r.content=t.content),void 0!==t.description&&(r.description=t.description),void 0!==t.priority&&(r.priority=t.priority),void 0!==t.labels&&(r.labels=t.labels),void 0!==t.dueString&&(r.dueString=t.dueString),Object.keys(r).length>0){console.log("\uD83D\uDCDD Updating task fields:",r);let t=await o.updateTask(e,r);console.log("✅ Update task result:",t)}else console.log("ℹ️  No additional fields to update");return!0}catch(e){throw console.error("Error updating task:",e),console.error("Full error details:",JSON.stringify(e,null,2)),Error("Failed to update task")}}static async closeTask(e){try{return await o.closeTask(e),!0}catch(e){throw console.error("Error closing task:",e),Error("Failed to close task")}}static async createTask(e,t){try{let r={content:e,...t?.description&&{description:t.description},...t?.projectId&&{projectId:t.projectId},...t?.priority&&{priority:t.priority},...t?.labels&&{labels:t.labels},...t?.dueString&&{dueString:t.dueString}},s=await o.addTask(r);return{id:s.id,content:s.content,description:s.description||"",projectId:s.projectId,priority:s.priority,labels:s.labels||[],due:s.due?{date:s.due.date,string:s.due.string,datetime:s.due.datetime||void 0}:void 0,deadline:s.deadline?{date:s.deadline.date,string:s.deadline.string}:void 0,createdAt:s.createdAt||new Date().toISOString(),isCompleted:!!s.completedAt}}catch(e){throw console.error("Error creating task:",e),Error("Failed to create task")}}static async getProjectDescription(e){try{let t=(await this.getProjectTasks(e)).find(e=>e.content.startsWith("* ")&&e.labels.includes("project description"));if(t)return t.content.substring(2).trim();return null}catch(e){return console.error("Error fetching project description:",e),null}}static async setProjectDescription(e,t){try{let r=(await this.getProjectTasks(e)).find(e=>e.content.startsWith("* ")&&e.labels.includes("project description"));return r?await this.updateTask(r.id,{content:`* ${t}`}):await this.createTask(`* ${t}`,{projectId:e,labels:["project description"],priority:1}),!0}catch(e){throw console.error("Error setting project description:",e),Error("Failed to set project description")}}static async fetchProjectHierarchyWithDescriptions(){try{let e=await this.getProjects(),t=await Promise.all(e.map(async e=>{let t=await this.getProjectDescription(e.id);return{...e,description:t||""}})),r=t.filter(e=>!e.parentId),o=t.filter(e=>e.parentId),s=r.map(e=>({...e,children:o.filter(t=>t.parentId===e.id)}));return{flat:t,hierarchical:s}}catch(e){throw console.error("Error fetching project hierarchy:",e),Error("Failed to fetch project hierarchy with descriptions")}}static async generateTodoistContext(){try{let{flat:e,hierarchical:t}=await this.fetchProjectHierarchyWithDescriptions();return{projects:e,hierarchy:t,summary:{totalProjects:e.length,projectsWithDescriptions:e.filter(e=>e.description.trim()).length,rootProjects:t.length}}}catch(e){throw console.error("Error generating Todoist context:",e),Error("Failed to generate Todoist context")}}}},6487:()=>{},8335:()=>{}};