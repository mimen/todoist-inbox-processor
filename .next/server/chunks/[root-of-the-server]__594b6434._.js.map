{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/mimen/Documents/GitHub/todoist-mcp/todoist-inbox-processor/lib/todoist-api.ts"],"sourcesContent":["import { TodoistApi } from '@doist/todoist-api-typescript'\n\n// Initialize Todoist API client\nconst api = new TodoistApi(process.env.TODOIST_API_KEY!)\n\nexport interface TodoistTaskApi {\n  id: string\n  content: string\n  description: string\n  projectId: string\n  priority: 1 | 2 | 3 | 4\n  labels: string[]\n  due?: {\n    date: string\n    string: string\n    datetime?: string\n  }\n  deadline?: {\n    date: string\n    string: string\n  }\n  createdAt: string\n  isCompleted: boolean\n}\n\nexport interface TodoistProjectApi {\n  id: string\n  name: string\n  color: string\n  isInboxProject: boolean\n  parentId?: string\n}\n\nexport interface TodoistLabelApi {\n  id: string\n  name: string\n  color: string\n}\n\nexport interface TaskUpdateRequest {\n  content?: string\n  description?: string\n  projectId?: string\n  priority?: 1 | 2 | 3 | 4\n  labels?: string[]\n  dueString?: string\n  deadline?: string\n}\n\nexport class TodoistApiClient {\n  // Fetch all projects\n  static async getProjects(): Promise<TodoistProjectApi[]> {\n    try {\n      const response = await api.getProjects()\n      console.log('Projects response:', response)\n      console.log('Projects response type:', typeof response)\n      console.log('Projects response keys:', Object.keys(response || {}))\n      \n      // Handle different response formats\n      let projects: any[]\n      if (Array.isArray(response)) {\n        projects = response\n      } else if (response && typeof response === 'object') {\n        // Try common pagination field names\n        projects = (response as any).data || \n                  (response as any).items || \n                  (response as any).projects ||\n                  (response as any).results ||\n                  []\n      } else {\n        projects = []\n      }\n\n      console.log('Extracted projects:', projects)\n      console.log('Projects array length:', projects.length)\n\n      // Filter out null/undefined items\n      const validProjects = projects.filter(project => project && project.id)\n\n      return validProjects.map((project: any) => ({\n        id: project.id,\n        name: project.name,\n        color: project.color,\n        isInboxProject: project.inboxProject || false,\n        parentId: project.parentId || undefined,\n      }))\n    } catch (error) {\n      console.error('Error fetching projects:', error)\n      throw new Error('Failed to fetch projects')\n    }\n  }\n\n  // Fetch all labels\n  static async getLabels(): Promise<TodoistLabelApi[]> {\n    try {\n      const response = await api.getLabels()\n      console.log('Labels response:', response)\n      console.log('Labels response keys:', Object.keys(response || {}))\n      \n      // Handle different response formats\n      let labels: any[]\n      if (Array.isArray(response)) {\n        labels = response\n      } else if (response && typeof response === 'object') {\n        // Try common pagination field names\n        labels = (response as any).data || \n                (response as any).items || \n                (response as any).labels ||\n                (response as any).results ||\n                []\n      } else {\n        labels = []\n      }\n\n      console.log('Extracted labels:', labels)\n      \n      // Filter out null/undefined items\n      const validLabels = labels.filter(label => label && label.id)\n\n      return validLabels.map((label: any) => ({\n        id: label.id,\n        name: label.name,\n        color: label.color,\n      }))\n    } catch (error) {\n      console.error('Error fetching labels:', error)\n      throw new Error('Failed to fetch labels')\n    }\n  }\n\n  // Fetch active tasks (inbox tasks or all tasks)\n  static async getTasks(filter?: string): Promise<TodoistTaskApi[]> {\n    try {\n      const response = filter ? await api.getTasks({ filter } as any) : await api.getTasks()\n      console.log('Tasks response:', response)\n      console.log('Tasks response keys:', Object.keys(response || {}))\n      \n      // Handle different response formats\n      let tasks: any[]\n      if (Array.isArray(response)) {\n        tasks = response\n      } else if (response && typeof response === 'object') {\n        // Try common pagination field names\n        tasks = (response as any).data || \n               (response as any).items || \n               (response as any).tasks ||\n               (response as any).results ||\n               []\n      } else {\n        tasks = []\n      }\n\n      console.log('Extracted tasks:', tasks)\n      \n      // Filter out null/undefined items\n      const validTasks = tasks.filter(task => task && task.id)\n\n      return validTasks.map((task: any) => ({\n        id: task.id,\n        content: task.content,\n        description: task.description || '',\n        projectId: task.projectId,\n        priority: task.priority as 1 | 2 | 3 | 4,\n        labels: task.labels || [],\n        due: task.due ? {\n          date: task.due.date,\n          string: task.due.string,\n          datetime: task.due.datetime || undefined,\n        } : undefined,\n        deadline: task.deadline ? {\n          date: task.deadline.date,\n          string: task.deadline.string,\n        } : undefined,\n        createdAt: task.createdAt,\n        isCompleted: task.isCompleted || false,\n      }))\n    } catch (error) {\n      console.error('Error fetching tasks:', error)\n      throw new Error('Failed to fetch tasks')\n    }\n  }\n\n  // Get inbox tasks specifically\n  static async getInboxTasks(): Promise<TodoistTaskApi[]> {\n    return this.getTasks()\n  }\n\n  // Get tasks for a specific project\n  static async getProjectTasks(projectId: string): Promise<TodoistTaskApi[]> {\n    try {\n      const response = await api.getTasks({ projectId } as any)\n      console.log(`Tasks response for project ${projectId}:`, response)\n      \n      // Handle different response formats\n      let tasks: any[]\n      if (Array.isArray(response)) {\n        tasks = response\n      } else if (response && typeof response === 'object') {\n        // Try common pagination field names\n        tasks = (response as any).data || \n               (response as any).items || \n               (response as any).tasks ||\n               (response as any).results ||\n               []\n      } else {\n        tasks = []\n      }\n\n      console.log(`Extracted tasks for project ${projectId}:`, tasks)\n      \n      // Filter out null/undefined items\n      const validTasks = tasks.filter(task => task && task.id)\n\n      return validTasks.map((task: any) => ({\n        id: task.id,\n        content: task.content,\n        description: task.description || '',\n        projectId: task.projectId,\n        priority: task.priority as 1 | 2 | 3 | 4,\n        labels: task.labels || [],\n        due: task.due ? {\n          date: task.due.date,\n          string: task.due.string,\n          datetime: task.due.datetime || undefined,\n        } : undefined,\n        deadline: task.deadline ? {\n          date: task.deadline.date,\n          string: task.deadline.string,\n        } : undefined,\n        createdAt: task.createdAt,\n        isCompleted: task.isCompleted || false,\n      }))\n    } catch (error) {\n      console.error(`Error fetching tasks for project ${projectId}:`, error)\n      throw new Error('Failed to fetch project tasks')\n    }\n  }\n\n  // Move task to a different project using Sync API v9\n  static async moveTaskToProject(taskId: string, projectId: string): Promise<boolean> {\n    try {\n      console.log('üîÑ Moving task via Sync API:', { taskId, projectId })\n      \n      // Generate a unique UUID for the command\n      const uuid = crypto.randomUUID()\n      \n      const response = await fetch('https://api.todoist.com/sync/v9/sync', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.TODOIST_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commands: [\n            {\n              type: 'item_move',\n              args: {\n                id: taskId,\n                project_id: projectId\n              },\n              uuid: uuid\n            }\n          ]\n        }),\n      })\n      \n      if (!response.ok) {\n        const errorText = await response.text()\n        console.error('Sync API move failed:', response.status, errorText)\n        throw new Error(`Sync API move failed: ${response.status} ${errorText}`)\n      }\n      \n      const result = await response.json()\n      console.log('‚úÖ Sync API move result:', result)\n      \n      // Check if the command was successful\n      if (result.sync_status && result.sync_status[uuid] === 'ok') {\n        console.log('‚úÖ Task move confirmed successful')\n        return true\n      } else {\n        console.error('‚ùå Task move failed:', result.sync_status)\n        throw new Error(`Task move failed: ${JSON.stringify(result.sync_status)}`)\n      }\n    } catch (error) {\n      console.error('‚ùå Sync API move error:', error)\n      throw error\n    }\n  }\n\n  // Update a task\n  static async updateTask(taskId: string, updates: TaskUpdateRequest): Promise<boolean> {\n    try {\n      console.log('TodoistApiClient.updateTask called with:', { taskId, updates })\n      \n      // Handle project move separately using Sync API\n      if (updates.projectId && updates.projectId !== '') {\n        try {\n          const projects = await this.getProjects()\n          const targetProject = projects.find(p => p.id === updates.projectId)\n          if (!targetProject) {\n            console.error('Target project not found:', updates.projectId)\n            console.log('Available projects:', projects.map(p => ({ id: p.id, name: p.name })))\n            throw new Error(`Project with ID ${updates.projectId} not found`)\n          }\n          console.log('Target project found:', { id: targetProject.id, name: targetProject.name })\n          \n          // Use Sync API for project move\n          await this.moveTaskToProject(taskId, updates.projectId)\n        } catch (moveError) {\n          console.error('‚ùå Project move failed:', moveError)\n          throw new Error(`Failed to move task to project: ${moveError}`)\n        }\n      }\n      \n      // Handle deadline separately using Sync API\n      if (updates.deadline !== undefined) {\n        try {\n          console.log('üîÑ Updating deadline via Sync API:', { taskId, deadline: updates.deadline })\n          \n          // Generate a unique UUID for the command\n          const uuid = crypto.randomUUID()\n          \n          // Parse natural language date to ISO format\n          let deadlineDate = null\n          if (updates.deadline) {\n            // First try to parse natural language using Todoist's due date parser\n            try {\n              const parseResponse = await api.addTask({\n                content: 'temp',\n                dueString: updates.deadline\n              })\n              if (parseResponse.due) {\n                deadlineDate = { date: parseResponse.due.date }\n              }\n              // Delete the temporary task\n              await api.deleteTask(parseResponse.id)\n            } catch (parseError) {\n              console.error('Failed to parse deadline date:', parseError)\n              throw new Error('Invalid deadline date format')\n            }\n          }\n          \n          const response = await fetch('https://api.todoist.com/sync/v9/sync', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${process.env.TODOIST_API_KEY}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              commands: [\n                {\n                  type: 'item_update',\n                  args: {\n                    id: taskId,\n                    deadline: deadlineDate\n                  },\n                  uuid: uuid\n                }\n              ]\n            }),\n          })\n          \n          if (!response.ok) {\n            const errorText = await response.text()\n            console.error('Sync API deadline update failed:', response.status, errorText)\n            throw new Error(`Sync API deadline update failed: ${response.status} ${errorText}`)\n          }\n          \n          const result = await response.json()\n          console.log('‚úÖ Sync API deadline result:', result)\n          \n          // Check if the command was successful\n          if (result.sync_status && result.sync_status[uuid] === 'ok') {\n            console.log('‚úÖ Deadline update confirmed successful')\n          } else {\n            console.error('‚ùå Deadline update failed:', result.sync_status)\n            throw new Error(`Deadline update failed: ${JSON.stringify(result.sync_status)}`)\n          }\n        } catch (deadlineError) {\n          console.error('‚ùå Deadline update error:', deadlineError)\n          throw new Error(`Failed to update deadline: ${deadlineError}`)\n        }\n      }\n      \n      // Build updates object for other fields (excluding projectId and deadline)\n      const cleanUpdates: any = {}\n      \n      if (updates.content !== undefined) cleanUpdates.content = updates.content\n      if (updates.description !== undefined) cleanUpdates.description = updates.description\n      if (updates.priority !== undefined) cleanUpdates.priority = updates.priority\n      if (updates.labels !== undefined) cleanUpdates.labels = updates.labels\n      if (updates.dueString !== undefined) cleanUpdates.dueString = updates.dueString\n      \n      // Only update other fields if there are any\n      if (Object.keys(cleanUpdates).length > 0) {\n        console.log('üìù Updating task fields:', cleanUpdates)\n        const result = await api.updateTask(taskId, cleanUpdates)\n        console.log('‚úÖ Update task result:', result)\n      } else {\n        console.log('‚ÑπÔ∏è  No additional fields to update')\n      }\n      \n      return true\n    } catch (error) {\n      console.error('Error updating task:', error)\n      console.error('Full error details:', JSON.stringify(error, null, 2))\n      throw new Error('Failed to update task')\n    }\n  }\n\n  // Close (complete) a task\n  static async closeTask(taskId: string): Promise<boolean> {\n    try {\n      await api.closeTask(taskId)\n      return true\n    } catch (error) {\n      console.error('Error closing task:', error)\n      throw new Error('Failed to close task')\n    }\n  }\n\n  // Create a new task\n  static async createTask(content: string, options?: {\n    description?: string\n    projectId?: string\n    priority?: 1 | 2 | 3 | 4\n    labels?: string[]\n    dueString?: string\n  }): Promise<TodoistTaskApi> {\n    try {\n      const taskData: any = {\n        content,\n        ...(options?.description && { description: options.description }),\n        ...(options?.projectId && { projectId: options.projectId }),\n        ...(options?.priority && { priority: options.priority }),\n        ...(options?.labels && { labels: options.labels }),\n        ...(options?.dueString && { dueString: options.dueString }),\n      }\n      \n      const response = await api.addTask(taskData)\n      return {\n        id: response.id,\n        content: response.content,\n        description: response.description || '',\n        projectId: response.projectId,\n        priority: response.priority as 1 | 2 | 3 | 4,\n        labels: response.labels || [],\n        due: response.due ? {\n          date: response.due.date,\n          string: response.due.string,\n          datetime: response.due.datetime || undefined\n        } : undefined,\n        deadline: (response as any).deadline ? {\n          date: (response as any).deadline.date,\n          string: (response as any).deadline.string,\n        } : undefined,\n        createdAt: (response as any).createdAt || new Date().toISOString(),\n        isCompleted: !!response.completedAt,\n      }\n    } catch (error) {\n      console.error('Error creating task:', error)\n      throw new Error('Failed to create task')\n    }\n  }\n\n  // Project metadata helpers\n  static async getProjectMetadata(projectId: string): Promise<{\n    description: string\n    category: 'area' | 'project' | null\n    priority: 1 | 2 | 3 | 4 | null\n    due?: { date: string; string: string }\n    deadline?: { date: string; string: string }\n  } | null> {\n    try {\n      const [tasks, projects] = await Promise.all([\n        this.getProjectTasks(projectId),\n        this.getProjects()\n      ])\n      \n      const project = projects.find(p => p.id === projectId)\n      if (!project) return null\n      \n      const metadataTask = tasks.find(task => \n        task.labels.includes('project-metadata')\n      )\n      \n      if (metadataTask) {\n        // Extract category from labels\n        let category: 'area' | 'project' | null = null\n        if (metadataTask.labels.includes('area-of-responsibility')) {\n          category = 'area'\n        } else if (metadataTask.labels.includes('project-type')) {\n          category = 'project'\n        }\n        \n        return {\n          description: metadataTask.description || '',\n          category,\n          priority: metadataTask.priority,\n          due: metadataTask.due,\n          deadline: metadataTask.deadline\n        }\n      }\n      \n      return {\n        description: '',\n        category: null,\n        priority: null\n      }\n    } catch (error) {\n      console.error('Error fetching project metadata:', error)\n      return null\n    }\n  }\n  \n  // Legacy method for backward compatibility\n  static async getProjectDescription(projectId: string): Promise<string | null> {\n    const metadata = await this.getProjectMetadata(projectId)\n    return metadata?.description || null\n  }\n\n  static async setProjectMetadata(projectId: string, metadata: {\n    description?: string\n    category?: 'area' | 'project' | null\n    priority?: 1 | 2 | 3 | 4 | null\n    dueString?: string\n    deadline?: string\n  }): Promise<boolean> {\n    try {\n      const [tasks, projects] = await Promise.all([\n        this.getProjectTasks(projectId),\n        this.getProjects()\n      ])\n      \n      const project = projects.find(p => p.id === projectId)\n      if (!project) {\n        throw new Error(`Project with ID ${projectId} not found`)\n      }\n      \n      const existingMetadataTask = tasks.find(task => \n        task.labels.includes('project-metadata')\n      )\n      \n      // Build labels array\n      const labels = ['project-metadata']\n      if (metadata.category === 'area') {\n        labels.push('area-of-responsibility')\n      } else if (metadata.category === 'project') {\n        labels.push('project-type')\n      }\n      \n      const taskData = {\n        content: project.name, // Use actual project name as content\n        description: metadata.description || '',\n        labels,\n        ...(metadata.priority && { priority: metadata.priority }),\n        ...(metadata.dueString && { dueString: metadata.dueString }),\n        ...(metadata.deadline && { deadline: metadata.deadline })\n      }\n      \n      if (existingMetadataTask) {\n        // Update existing metadata task\n        await this.updateTask(existingMetadataTask.id, taskData)\n      } else {\n        // Create new metadata task\n        await this.createTask(project.name, {\n          projectId,\n          ...taskData\n        })\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error setting project metadata:', error)\n      throw new Error('Failed to set project metadata')\n    }\n  }\n  \n  // Legacy method for backward compatibility\n  static async setProjectDescription(projectId: string, description: string): Promise<boolean> {\n    return this.setProjectMetadata(projectId, { description })\n  }\n\n  // Project hierarchy with metadata\n  static async fetchProjectHierarchyWithMetadata(): Promise<{\n    flat: (TodoistProjectApi & { \n      description: string\n      category: 'area' | 'project' | null\n      priority: 1 | 2 | 3 | 4 | null\n      due?: { date: string; string: string }\n      deadline?: { date: string; string: string }\n    })[]\n    hierarchical: (TodoistProjectApi & { \n      description: string\n      category: 'area' | 'project' | null\n      priority: 1 | 2 | 3 | 4 | null\n      due?: { date: string; string: string }\n      deadline?: { date: string; string: string }\n      children: (TodoistProjectApi & { \n        description: string\n        category: 'area' | 'project' | null\n        priority: 1 | 2 | 3 | 4 | null\n        due?: { date: string; string: string }\n        deadline?: { date: string; string: string }\n      })[]\n    })[]\n  }> {\n    try {\n      // 1. Get all projects\n      const projects = await this.getProjects()\n      \n      // 2. Get metadata for all projects in parallel\n      const projectsWithMetadata = await Promise.all(\n        projects.map(async (project) => {\n          const metadata = await this.getProjectMetadata(project.id)\n          return {\n            ...project,\n            description: metadata?.description || '',\n            category: metadata?.category || null,\n            priority: metadata?.priority || null,\n            due: metadata?.due,\n            deadline: metadata?.deadline\n          }\n        })\n      )\n      \n      // 3. Build hierarchy map\n      const rootProjects = projectsWithMetadata.filter(p => !p.parentId)\n      const childProjects = projectsWithMetadata.filter(p => p.parentId)\n      \n      const hierarchy = rootProjects.map(parent => ({\n        ...parent,\n        children: childProjects.filter(child => child.parentId === parent.id)\n      }))\n      \n      return {\n        flat: projectsWithMetadata,\n        hierarchical: hierarchy\n      }\n    } catch (error) {\n      console.error('Error fetching project hierarchy:', error)\n      throw new Error('Failed to fetch project hierarchy with metadata')\n    }\n  }\n  \n  // Legacy method for backward compatibility\n  static async fetchProjectHierarchyWithDescriptions(): Promise<{\n    flat: (TodoistProjectApi & { description: string })[]\n    hierarchical: (TodoistProjectApi & { description: string; children: (TodoistProjectApi & { description: string })[] })[]\n  }> {\n    const result = await this.fetchProjectHierarchyWithMetadata()\n    return {\n      flat: result.flat.map(p => ({ ...p, description: p.description })),\n      hierarchical: result.hierarchical.map(p => ({\n        ...p,\n        description: p.description,\n        children: p.children.map(c => ({ ...c, description: c.description }))\n      }))\n    }\n  }\n\n  // Generate context for LLM requests\n  static async generateTodoistContext(): Promise<{\n    projects: (TodoistProjectApi & { \n      description: string\n      category: 'area' | 'project' | null\n      priority: 1 | 2 | 3 | 4 | null\n    })[]\n    hierarchy: (TodoistProjectApi & { \n      description: string\n      category: 'area' | 'project' | null\n      priority: 1 | 2 | 3 | 4 | null\n      children: (TodoistProjectApi & { \n        description: string\n        category: 'area' | 'project' | null\n        priority: 1 | 2 | 3 | 4 | null\n      })[]\n    })[]\n    summary: {\n      totalProjects: number\n      projectsWithDescriptions: number\n      rootProjects: number\n      areas: number\n      projects: number\n    }\n  }> {\n    try {\n      const { flat, hierarchical } = await this.fetchProjectHierarchyWithMetadata()\n      \n      return {\n        projects: flat,\n        hierarchy: hierarchical,\n        summary: {\n          totalProjects: flat.length,\n          projectsWithDescriptions: flat.filter(p => p.description.trim()).length,\n          rootProjects: hierarchical.length,\n          areas: flat.filter(p => p.category === 'area').length,\n          projects: flat.filter(p => p.category === 'project').length\n        }\n      }\n    } catch (error) {\n      console.error('Error generating Todoist context:', error)\n      throw new Error('Failed to generate Todoist context')\n    }\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEA,gCAAgC;AAChC,MAAM,MAAM,IAAI,0KAAA,CAAA,aAAU,CAAC,QAAQ,GAAG,CAAC,eAAe;AA8C/C,MAAM;IACX,qBAAqB;IACrB,aAAa,cAA4C;QACvD,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,WAAW;YACtC,QAAQ,GAAG,CAAC,sBAAsB;YAClC,QAAQ,GAAG,CAAC,2BAA2B,OAAO;YAC9C,QAAQ,GAAG,CAAC,2BAA2B,OAAO,IAAI,CAAC,YAAY,CAAC;YAEhE,oCAAoC;YACpC,IAAI;YACJ,IAAI,MAAM,OAAO,CAAC,WAAW;gBAC3B,WAAW;YACb,OAAO,IAAI,YAAY,OAAO,aAAa,UAAU;gBACnD,oCAAoC;gBACpC,WAAW,AAAC,SAAiB,IAAI,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,QAAQ,IAC1B,AAAC,SAAiB,OAAO,IACzB,EAAE;YACd,OAAO;gBACL,WAAW,EAAE;YACf;YAEA,QAAQ,GAAG,CAAC,uBAAuB;YACnC,QAAQ,GAAG,CAAC,0BAA0B,SAAS,MAAM;YAErD,kCAAkC;YAClC,MAAM,gBAAgB,SAAS,MAAM,CAAC,CAAA,UAAW,WAAW,QAAQ,EAAE;YAEtE,OAAO,cAAc,GAAG,CAAC,CAAC,UAAiB,CAAC;oBAC1C,IAAI,QAAQ,EAAE;oBACd,MAAM,QAAQ,IAAI;oBAClB,OAAO,QAAQ,KAAK;oBACpB,gBAAgB,QAAQ,YAAY,IAAI;oBACxC,UAAU,QAAQ,QAAQ,IAAI;gBAChC,CAAC;QACH,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,mBAAmB;IACnB,aAAa,YAAwC;QACnD,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,SAAS;YACpC,QAAQ,GAAG,CAAC,oBAAoB;YAChC,QAAQ,GAAG,CAAC,yBAAyB,OAAO,IAAI,CAAC,YAAY,CAAC;YAE9D,oCAAoC;YACpC,IAAI;YACJ,IAAI,MAAM,OAAO,CAAC,WAAW;gBAC3B,SAAS;YACX,OAAO,IAAI,YAAY,OAAO,aAAa,UAAU;gBACnD,oCAAoC;gBACpC,SAAS,AAAC,SAAiB,IAAI,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,MAAM,IACxB,AAAC,SAAiB,OAAO,IACzB,EAAE;YACZ,OAAO;gBACL,SAAS,EAAE;YACb;YAEA,QAAQ,GAAG,CAAC,qBAAqB;YAEjC,kCAAkC;YAClC,MAAM,cAAc,OAAO,MAAM,CAAC,CAAA,QAAS,SAAS,MAAM,EAAE;YAE5D,OAAO,YAAY,GAAG,CAAC,CAAC,QAAe,CAAC;oBACtC,IAAI,MAAM,EAAE;oBACZ,MAAM,MAAM,IAAI;oBAChB,OAAO,MAAM,KAAK;gBACpB,CAAC;QACH,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,gDAAgD;IAChD,aAAa,SAAS,MAAe,EAA6B;QAChE,IAAI;YACF,MAAM,WAAW,SAAS,MAAM,IAAI,QAAQ,CAAC;gBAAE;YAAO,KAAY,MAAM,IAAI,QAAQ;YACpF,QAAQ,GAAG,CAAC,mBAAmB;YAC/B,QAAQ,GAAG,CAAC,wBAAwB,OAAO,IAAI,CAAC,YAAY,CAAC;YAE7D,oCAAoC;YACpC,IAAI;YACJ,IAAI,MAAM,OAAO,CAAC,WAAW;gBAC3B,QAAQ;YACV,OAAO,IAAI,YAAY,OAAO,aAAa,UAAU;gBACnD,oCAAoC;gBACpC,QAAQ,AAAC,SAAiB,IAAI,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,OAAO,IACzB,EAAE;YACX,OAAO;gBACL,QAAQ,EAAE;YACZ;YAEA,QAAQ,GAAG,CAAC,oBAAoB;YAEhC,kCAAkC;YAClC,MAAM,aAAa,MAAM,MAAM,CAAC,CAAA,OAAQ,QAAQ,KAAK,EAAE;YAEvD,OAAO,WAAW,GAAG,CAAC,CAAC,OAAc,CAAC;oBACpC,IAAI,KAAK,EAAE;oBACX,SAAS,KAAK,OAAO;oBACrB,aAAa,KAAK,WAAW,IAAI;oBACjC,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,QAAQ,KAAK,MAAM,IAAI,EAAE;oBACzB,KAAK,KAAK,GAAG,GAAG;wBACd,MAAM,KAAK,GAAG,CAAC,IAAI;wBACnB,QAAQ,KAAK,GAAG,CAAC,MAAM;wBACvB,UAAU,KAAK,GAAG,CAAC,QAAQ,IAAI;oBACjC,IAAI;oBACJ,UAAU,KAAK,QAAQ,GAAG;wBACxB,MAAM,KAAK,QAAQ,CAAC,IAAI;wBACxB,QAAQ,KAAK,QAAQ,CAAC,MAAM;oBAC9B,IAAI;oBACJ,WAAW,KAAK,SAAS;oBACzB,aAAa,KAAK,WAAW,IAAI;gBACnC,CAAC;QACH,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,+BAA+B;IAC/B,aAAa,gBAA2C;QACtD,OAAO,IAAI,CAAC,QAAQ;IACtB;IAEA,mCAAmC;IACnC,aAAa,gBAAgB,SAAiB,EAA6B;QACzE,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,QAAQ,CAAC;gBAAE;YAAU;YAChD,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,UAAU,CAAC,CAAC,EAAE;YAExD,oCAAoC;YACpC,IAAI;YACJ,IAAI,MAAM,OAAO,CAAC,WAAW;gBAC3B,QAAQ;YACV,OAAO,IAAI,YAAY,OAAO,aAAa,UAAU;gBACnD,oCAAoC;gBACpC,QAAQ,AAAC,SAAiB,IAAI,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,KAAK,IACvB,AAAC,SAAiB,OAAO,IACzB,EAAE;YACX,OAAO;gBACL,QAAQ,EAAE;YACZ;YAEA,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC,EAAE;YAEzD,kCAAkC;YAClC,MAAM,aAAa,MAAM,MAAM,CAAC,CAAA,OAAQ,QAAQ,KAAK,EAAE;YAEvD,OAAO,WAAW,GAAG,CAAC,CAAC,OAAc,CAAC;oBACpC,IAAI,KAAK,EAAE;oBACX,SAAS,KAAK,OAAO;oBACrB,aAAa,KAAK,WAAW,IAAI;oBACjC,WAAW,KAAK,SAAS;oBACzB,UAAU,KAAK,QAAQ;oBACvB,QAAQ,KAAK,MAAM,IAAI,EAAE;oBACzB,KAAK,KAAK,GAAG,GAAG;wBACd,MAAM,KAAK,GAAG,CAAC,IAAI;wBACnB,QAAQ,KAAK,GAAG,CAAC,MAAM;wBACvB,UAAU,KAAK,GAAG,CAAC,QAAQ,IAAI;oBACjC,IAAI;oBACJ,UAAU,KAAK,QAAQ,GAAG;wBACxB,MAAM,KAAK,QAAQ,CAAC,IAAI;wBACxB,QAAQ,KAAK,QAAQ,CAAC,MAAM;oBAC9B,IAAI;oBACJ,WAAW,KAAK,SAAS;oBACzB,aAAa,KAAK,WAAW,IAAI;gBACnC,CAAC;QACH,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,iCAAiC,EAAE,UAAU,CAAC,CAAC,EAAE;YAChE,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,qDAAqD;IACrD,aAAa,kBAAkB,MAAc,EAAE,SAAiB,EAAoB;QAClF,IAAI;YACF,QAAQ,GAAG,CAAC,gCAAgC;gBAAE;gBAAQ;YAAU;YAEhE,yCAAyC;YACzC,MAAM,OAAO,OAAO,UAAU;YAE9B,MAAM,WAAW,MAAM,MAAM,wCAAwC;gBACnE,QAAQ;gBACR,SAAS;oBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,eAAe,EAAE;oBACxD,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,UAAU;wBACR;4BACE,MAAM;4BACN,MAAM;gCACJ,IAAI;gCACJ,YAAY;4BACd;4BACA,MAAM;wBACR;qBACD;gBACH;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,QAAQ,KAAK,CAAC,yBAAyB,SAAS,MAAM,EAAE;gBACxD,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,WAAW;YACzE;YAEA,MAAM,SAAS,MAAM,SAAS,IAAI;YAClC,QAAQ,GAAG,CAAC,2BAA2B;YAEvC,sCAAsC;YACtC,IAAI,OAAO,WAAW,IAAI,OAAO,WAAW,CAAC,KAAK,KAAK,MAAM;gBAC3D,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACT,OAAO;gBACL,QAAQ,KAAK,CAAC,uBAAuB,OAAO,WAAW;gBACvD,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,KAAK,SAAS,CAAC,OAAO,WAAW,GAAG;YAC3E;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,gBAAgB;IAChB,aAAa,WAAW,MAAc,EAAE,OAA0B,EAAoB;QACpF,IAAI;YACF,QAAQ,GAAG,CAAC,4CAA4C;gBAAE;gBAAQ;YAAQ;YAE1E,gDAAgD;YAChD,IAAI,QAAQ,SAAS,IAAI,QAAQ,SAAS,KAAK,IAAI;gBACjD,IAAI;oBACF,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;oBACvC,MAAM,gBAAgB,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,QAAQ,SAAS;oBACnE,IAAI,CAAC,eAAe;wBAClB,QAAQ,KAAK,CAAC,6BAA6B,QAAQ,SAAS;wBAC5D,QAAQ,GAAG,CAAC,uBAAuB,SAAS,GAAG,CAAC,CAAA,IAAK,CAAC;gCAAE,IAAI,EAAE,EAAE;gCAAE,MAAM,EAAE,IAAI;4BAAC,CAAC;wBAChF,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,QAAQ,SAAS,CAAC,UAAU,CAAC;oBAClE;oBACA,QAAQ,GAAG,CAAC,yBAAyB;wBAAE,IAAI,cAAc,EAAE;wBAAE,MAAM,cAAc,IAAI;oBAAC;oBAEtF,gCAAgC;oBAChC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,QAAQ,SAAS;gBACxD,EAAE,OAAO,WAAW;oBAClB,QAAQ,KAAK,CAAC,0BAA0B;oBACxC,MAAM,IAAI,MAAM,CAAC,gCAAgC,EAAE,WAAW;gBAChE;YACF;YAEA,4CAA4C;YAC5C,IAAI,QAAQ,QAAQ,KAAK,WAAW;gBAClC,IAAI;oBACF,QAAQ,GAAG,CAAC,sCAAsC;wBAAE;wBAAQ,UAAU,QAAQ,QAAQ;oBAAC;oBAEvF,yCAAyC;oBACzC,MAAM,OAAO,OAAO,UAAU;oBAE9B,4CAA4C;oBAC5C,IAAI,eAAe;oBACnB,IAAI,QAAQ,QAAQ,EAAE;wBACpB,sEAAsE;wBACtE,IAAI;4BACF,MAAM,gBAAgB,MAAM,IAAI,OAAO,CAAC;gCACtC,SAAS;gCACT,WAAW,QAAQ,QAAQ;4BAC7B;4BACA,IAAI,cAAc,GAAG,EAAE;gCACrB,eAAe;oCAAE,MAAM,cAAc,GAAG,CAAC,IAAI;gCAAC;4BAChD;4BACA,4BAA4B;4BAC5B,MAAM,IAAI,UAAU,CAAC,cAAc,EAAE;wBACvC,EAAE,OAAO,YAAY;4BACnB,QAAQ,KAAK,CAAC,kCAAkC;4BAChD,MAAM,IAAI,MAAM;wBAClB;oBACF;oBAEA,MAAM,WAAW,MAAM,MAAM,wCAAwC;wBACnE,QAAQ;wBACR,SAAS;4BACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,eAAe,EAAE;4BACxD,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BACnB,UAAU;gCACR;oCACE,MAAM;oCACN,MAAM;wCACJ,IAAI;wCACJ,UAAU;oCACZ;oCACA,MAAM;gCACR;6BACD;wBACH;oBACF;oBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;wBACrC,QAAQ,KAAK,CAAC,oCAAoC,SAAS,MAAM,EAAE;wBACnE,MAAM,IAAI,MAAM,CAAC,iCAAiC,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,WAAW;oBACpF;oBAEA,MAAM,SAAS,MAAM,SAAS,IAAI;oBAClC,QAAQ,GAAG,CAAC,+BAA+B;oBAE3C,sCAAsC;oBACtC,IAAI,OAAO,WAAW,IAAI,OAAO,WAAW,CAAC,KAAK,KAAK,MAAM;wBAC3D,QAAQ,GAAG,CAAC;oBACd,OAAO;wBACL,QAAQ,KAAK,CAAC,6BAA6B,OAAO,WAAW;wBAC7D,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,KAAK,SAAS,CAAC,OAAO,WAAW,GAAG;oBACjF;gBACF,EAAE,OAAO,eAAe;oBACtB,QAAQ,KAAK,CAAC,4BAA4B;oBAC1C,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,eAAe;gBAC/D;YACF;YAEA,2EAA2E;YAC3E,MAAM,eAAoB,CAAC;YAE3B,IAAI,QAAQ,OAAO,KAAK,WAAW,aAAa,OAAO,GAAG,QAAQ,OAAO;YACzE,IAAI,QAAQ,WAAW,KAAK,WAAW,aAAa,WAAW,GAAG,QAAQ,WAAW;YACrF,IAAI,QAAQ,QAAQ,KAAK,WAAW,aAAa,QAAQ,GAAG,QAAQ,QAAQ;YAC5E,IAAI,QAAQ,MAAM,KAAK,WAAW,aAAa,MAAM,GAAG,QAAQ,MAAM;YACtE,IAAI,QAAQ,SAAS,KAAK,WAAW,aAAa,SAAS,GAAG,QAAQ,SAAS;YAE/E,4CAA4C;YAC5C,IAAI,OAAO,IAAI,CAAC,cAAc,MAAM,GAAG,GAAG;gBACxC,QAAQ,GAAG,CAAC,4BAA4B;gBACxC,MAAM,SAAS,MAAM,IAAI,UAAU,CAAC,QAAQ;gBAC5C,QAAQ,GAAG,CAAC,yBAAyB;YACvC,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,QAAQ,KAAK,CAAC,uBAAuB,KAAK,SAAS,CAAC,OAAO,MAAM;YACjE,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,0BAA0B;IAC1B,aAAa,UAAU,MAAc,EAAoB;QACvD,IAAI;YACF,MAAM,IAAI,SAAS,CAAC;YACpB,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;YACrC,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,oBAAoB;IACpB,aAAa,WAAW,OAAe,EAAE,OAMxC,EAA2B;QAC1B,IAAI;YACF,MAAM,WAAgB;gBACpB;gBACA,GAAI,SAAS,eAAe;oBAAE,aAAa,QAAQ,WAAW;gBAAC,CAAC;gBAChE,GAAI,SAAS,aAAa;oBAAE,WAAW,QAAQ,SAAS;gBAAC,CAAC;gBAC1D,GAAI,SAAS,YAAY;oBAAE,UAAU,QAAQ,QAAQ;gBAAC,CAAC;gBACvD,GAAI,SAAS,UAAU;oBAAE,QAAQ,QAAQ,MAAM;gBAAC,CAAC;gBACjD,GAAI,SAAS,aAAa;oBAAE,WAAW,QAAQ,SAAS;gBAAC,CAAC;YAC5D;YAEA,MAAM,WAAW,MAAM,IAAI,OAAO,CAAC;YACnC,OAAO;gBACL,IAAI,SAAS,EAAE;gBACf,SAAS,SAAS,OAAO;gBACzB,aAAa,SAAS,WAAW,IAAI;gBACrC,WAAW,SAAS,SAAS;gBAC7B,UAAU,SAAS,QAAQ;gBAC3B,QAAQ,SAAS,MAAM,IAAI,EAAE;gBAC7B,KAAK,SAAS,GAAG,GAAG;oBAClB,MAAM,SAAS,GAAG,CAAC,IAAI;oBACvB,QAAQ,SAAS,GAAG,CAAC,MAAM;oBAC3B,UAAU,SAAS,GAAG,CAAC,QAAQ,IAAI;gBACrC,IAAI;gBACJ,UAAU,AAAC,SAAiB,QAAQ,GAAG;oBACrC,MAAM,AAAC,SAAiB,QAAQ,CAAC,IAAI;oBACrC,QAAQ,AAAC,SAAiB,QAAQ,CAAC,MAAM;gBAC3C,IAAI;gBACJ,WAAW,AAAC,SAAiB,SAAS,IAAI,IAAI,OAAO,WAAW;gBAChE,aAAa,CAAC,CAAC,SAAS,WAAW;YACrC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,2BAA2B;IAC3B,aAAa,mBAAmB,SAAiB,EAMvC;QACR,IAAI;YACF,MAAM,CAAC,OAAO,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;gBAC1C,IAAI,CAAC,eAAe,CAAC;gBACrB,IAAI,CAAC,WAAW;aACjB;YAED,MAAM,UAAU,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAC5C,IAAI,CAAC,SAAS,OAAO;YAErB,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,OAC9B,KAAK,MAAM,CAAC,QAAQ,CAAC;YAGvB,IAAI,cAAc;gBAChB,+BAA+B;gBAC/B,IAAI,WAAsC;gBAC1C,IAAI,aAAa,MAAM,CAAC,QAAQ,CAAC,2BAA2B;oBAC1D,WAAW;gBACb,OAAO,IAAI,aAAa,MAAM,CAAC,QAAQ,CAAC,iBAAiB;oBACvD,WAAW;gBACb;gBAEA,OAAO;oBACL,aAAa,aAAa,WAAW,IAAI;oBACzC;oBACA,UAAU,aAAa,QAAQ;oBAC/B,KAAK,aAAa,GAAG;oBACrB,UAAU,aAAa,QAAQ;gBACjC;YACF;YAEA,OAAO;gBACL,aAAa;gBACb,UAAU;gBACV,UAAU;YACZ;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO;QACT;IACF;IAEA,2CAA2C;IAC3C,aAAa,sBAAsB,SAAiB,EAA0B;QAC5E,MAAM,WAAW,MAAM,IAAI,CAAC,kBAAkB,CAAC;QAC/C,OAAO,UAAU,eAAe;IAClC;IAEA,aAAa,mBAAmB,SAAiB,EAAE,QAMlD,EAAoB;QACnB,IAAI;YACF,MAAM,CAAC,OAAO,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;gBAC1C,IAAI,CAAC,eAAe,CAAC;gBACrB,IAAI,CAAC,WAAW;aACjB;YAED,MAAM,UAAU,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;YAC5C,IAAI,CAAC,SAAS;gBACZ,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,UAAU,UAAU,CAAC;YAC1D;YAEA,MAAM,uBAAuB,MAAM,IAAI,CAAC,CAAA,OACtC,KAAK,MAAM,CAAC,QAAQ,CAAC;YAGvB,qBAAqB;YACrB,MAAM,SAAS;gBAAC;aAAmB;YACnC,IAAI,SAAS,QAAQ,KAAK,QAAQ;gBAChC,OAAO,IAAI,CAAC;YACd,OAAO,IAAI,SAAS,QAAQ,KAAK,WAAW;gBAC1C,OAAO,IAAI,CAAC;YACd;YAEA,MAAM,WAAW;gBACf,SAAS,QAAQ,IAAI;gBACrB,aAAa,SAAS,WAAW,IAAI;gBACrC;gBACA,GAAI,SAAS,QAAQ,IAAI;oBAAE,UAAU,SAAS,QAAQ;gBAAC,CAAC;gBACxD,GAAI,SAAS,SAAS,IAAI;oBAAE,WAAW,SAAS,SAAS;gBAAC,CAAC;gBAC3D,GAAI,SAAS,QAAQ,IAAI;oBAAE,UAAU,SAAS,QAAQ;gBAAC,CAAC;YAC1D;YAEA,IAAI,sBAAsB;gBACxB,gCAAgC;gBAChC,MAAM,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,EAAE;YACjD,OAAO;gBACL,2BAA2B;gBAC3B,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,EAAE;oBAClC;oBACA,GAAG,QAAQ;gBACb;YACF;YAEA,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,2CAA2C;IAC3C,aAAa,sBAAsB,SAAiB,EAAE,WAAmB,EAAoB;QAC3F,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW;YAAE;QAAY;IAC1D;IAEA,kCAAkC;IAClC,aAAa,oCAsBV;QACD,IAAI;YACF,sBAAsB;YACtB,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;YAEvC,+CAA+C;YAC/C,MAAM,uBAAuB,MAAM,QAAQ,GAAG,CAC5C,SAAS,GAAG,CAAC,OAAO;gBAClB,MAAM,WAAW,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;gBACzD,OAAO;oBACL,GAAG,OAAO;oBACV,aAAa,UAAU,eAAe;oBACtC,UAAU,UAAU,YAAY;oBAChC,UAAU,UAAU,YAAY;oBAChC,KAAK,UAAU;oBACf,UAAU,UAAU;gBACtB;YACF;YAGF,yBAAyB;YACzB,MAAM,eAAe,qBAAqB,MAAM,CAAC,CAAA,IAAK,CAAC,EAAE,QAAQ;YACjE,MAAM,gBAAgB,qBAAqB,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ;YAEjE,MAAM,YAAY,aAAa,GAAG,CAAC,CAAA,SAAU,CAAC;oBAC5C,GAAG,MAAM;oBACT,UAAU,cAAc,MAAM,CAAC,CAAA,QAAS,MAAM,QAAQ,KAAK,OAAO,EAAE;gBACtE,CAAC;YAED,OAAO;gBACL,MAAM;gBACN,cAAc;YAChB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qCAAqC;YACnD,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,2CAA2C;IAC3C,aAAa,wCAGV;QACD,MAAM,SAAS,MAAM,IAAI,CAAC,iCAAiC;QAC3D,OAAO;YACL,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA,IAAK,CAAC;oBAAE,GAAG,CAAC;oBAAE,aAAa,EAAE,WAAW;gBAAC,CAAC;YAChE,cAAc,OAAO,YAAY,CAAC,GAAG,CAAC,CAAA,IAAK,CAAC;oBAC1C,GAAG,CAAC;oBACJ,aAAa,EAAE,WAAW;oBAC1B,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAA,IAAK,CAAC;4BAAE,GAAG,CAAC;4BAAE,aAAa,EAAE,WAAW;wBAAC,CAAC;gBACrE,CAAC;QACH;IACF;IAEA,oCAAoC;IACpC,aAAa,yBAuBV;QACD,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,iCAAiC;YAE3E,OAAO;gBACL,UAAU;gBACV,WAAW;gBACX,SAAS;oBACP,eAAe,KAAK,MAAM;oBAC1B,0BAA0B,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,CAAC,IAAI,IAAI,MAAM;oBACvE,cAAc,aAAa,MAAM;oBACjC,OAAO,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,QAAQ,MAAM;oBACrD,UAAU,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,WAAW,MAAM;gBAC7D;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qCAAqC;YACnD,MAAM,IAAI,MAAM;QAClB;IACF;AACF","debugId":null}},
    {"offset": {"line": 727, "column": 0}, "map": {"version":3,"sources":["file:///Users/mimen/Documents/GitHub/todoist-mcp/todoist-inbox-processor/app/api/projects/hierarchy/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { TodoistApiClient } from '@/lib/todoist-api'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const format = searchParams.get('format') || 'hierarchical'\n\n    const { flat, hierarchical } = await TodoistApiClient.fetchProjectHierarchyWithDescriptions()\n\n    switch (format) {\n      case 'flat':\n        return NextResponse.json({ projects: flat })\n      \n      case 'context':\n        return NextResponse.json({\n          projects: flat,\n          hierarchy: hierarchical,\n          summary: {\n            totalProjects: flat.length,\n            projectsWithDescriptions: flat.filter(p => p.description.trim()).length,\n            rootProjects: hierarchical.length\n          }\n        })\n      \n      case 'hierarchical':\n      default:\n        return NextResponse.json({ \n          hierarchy: hierarchical,\n          flat: flat\n        })\n    }\n  } catch (error) {\n    console.error('Error fetching project hierarchy:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch project hierarchy' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;QAE7C,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,uHAAA,CAAA,mBAAgB,CAAC,qCAAqC;QAE3F,OAAQ;YACN,KAAK;gBACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,UAAU;gBAAK;YAE5C,KAAK;gBACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,UAAU;oBACV,WAAW;oBACX,SAAS;wBACP,eAAe,KAAK,MAAM;wBAC1B,0BAA0B,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,CAAC,IAAI,IAAI,MAAM;wBACvE,cAAc,aAAa,MAAM;oBACnC;gBACF;YAEF,KAAK;YACL;gBACE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,WAAW;oBACX,MAAM;gBACR;QACJ;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}