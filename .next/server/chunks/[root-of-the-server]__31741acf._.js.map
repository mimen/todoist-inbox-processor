{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/mimen/Documents/GitHub/todoist-mcp/todoist-inbox-processor/app/api/llm/generate-project-suggestions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nconst ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY\n\ninterface ProjectSuggestion {\n  projectId: string\n  projectName: string\n  confidence: number\n  reasoning: string\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { taskContent, taskDescription, projectHierarchy, currentProjectId } = await request.json()\n\n    if (!taskContent || !projectHierarchy) {\n      return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 })\n    }\n\n    // Build context from project hierarchy, excluding inbox\n    const projectContext = projectHierarchy.projects\n      ?.filter((project: any) => !project.isInboxProject)\n      ?.map((project: any) => {\n        const desc = project.description ? ` - ${project.description}` : ''\n        return `â€¢ ${project.name} (ID: ${project.id})${desc}`\n      })\n      .join('\\n') || 'No projects available'\n\n    const prompt = `Based on the task content and available projects, suggest 2-3 most appropriate projects for this task.\n\nTask: \"${taskContent}\"\n${taskDescription ? `Description: \"${taskDescription}\"` : ''}\n\nAvailable Projects:\n${projectContext}\n\nCurrent Project ID: ${currentProjectId}\n\nRespond with a JSON object containing an array of suggestions. Each suggestion should have:\n- projectId: the exact project ID from the list above\n- projectName: the exact project name from the list above  \n- confidence: a number between 0 and 1 indicating how confident you are\n- reasoning: a brief explanation (max 50 words) why this project fits\n\nOnly suggest projects that exist in the list above. Never suggest the Inbox project. Focus on the 2-3 best matches. If the task is already in a good project, you can still suggest alternatives.\n\nFormat: {\"suggestions\": [{\"projectId\": \"...\", \"projectName\": \"...\", \"confidence\": 0.85, \"reasoning\": \"...\"}]}`\n\n    let suggestions: ProjectSuggestion[] = []\n\n    if (ANTHROPIC_API_KEY) {\n      try {\n        const response = await fetch('https://api.anthropic.com/v1/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-api-key': ANTHROPIC_API_KEY,\n            'anthropic-version': '2023-06-01',\n          },\n          body: JSON.stringify({\n            model: 'claude-3-haiku-20240307',\n            max_tokens: 1000,\n            messages: [\n              {\n                role: 'user',\n                content: prompt\n              }\n            ]\n          })\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          const content = data.content?.[0]?.text || ''\n          \n          try {\n            // Try to extract JSON from the response\n            const jsonMatch = content.match(/\\{[\\s\\S]*\\}/)\n            if (jsonMatch) {\n              const parsed = JSON.parse(jsonMatch[0])\n              suggestions = parsed.suggestions || []\n            } else {\n              console.error('No JSON found in Anthropic response:', content)\n            }\n          } catch (parseError) {\n            console.error('Failed to parse Anthropic response:', content)\n          }\n        }\n      } catch (error) {\n        console.error('Anthropic API error:', error)\n      }\n    }\n\n    // Fallback to OpenAI if Anthropic failed or not available\n    if (suggestions.length === 0 && OPENAI_API_KEY) {\n      try {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${OPENAI_API_KEY}`,\n          },\n          body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n              {\n                role: 'user',\n                content: prompt\n              }\n            ],\n            max_tokens: 1000,\n            temperature: 0.3\n          })\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          const content = data.choices?.[0]?.message?.content || ''\n          \n          try {\n            // Try to extract JSON from the response\n            const jsonMatch = content.match(/\\{[\\s\\S]*\\}/)\n            if (jsonMatch) {\n              const parsed = JSON.parse(jsonMatch[0])\n              suggestions = parsed.suggestions || []\n            } else {\n              console.error('No JSON found in OpenAI response:', content)\n            }\n          } catch (parseError) {\n            console.error('Failed to parse OpenAI response:', content)\n          }\n        }\n      } catch (error) {\n        console.error('OpenAI API error:', error)\n      }\n    }\n\n    // Validate suggestions against available projects (excluding inbox)\n    const nonInboxProjects = projectHierarchy.projects?.filter((p: any) => !p.isInboxProject) || []\n    const validProjects = new Set(nonInboxProjects.map((p: any) => p.id))\n    const validSuggestions = suggestions.filter(s => \n      validProjects.has(s.projectId) && \n      s.projectId !== currentProjectId &&\n      s.confidence >= 0.3\n    )\n\n    return NextResponse.json({ \n      suggestions: validSuggestions.slice(0, 3)\n    })\n\n  } catch (error) {\n    console.error('Error generating project suggestions:', error)\n    return NextResponse.json({ \n      error: 'Failed to generate suggestions',\n      suggestions: []\n    }, { status: 500 })\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}