"use strict";(()=>{var e={};e.id=489,e.ids=[489],e.modules={604:(e,t,r)=>{r.r(t),r.d(t,{patchFetch:()=>j,routeModule:()=>l,serverHooks:()=>g,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>x});var o={};r.r(o),r.d(o,{POST:()=>d});var s=r(6559),i=r(8088),n=r(7719),a=r(2190),p=r(1051);let c=process.env.ANTHROPIC_API_KEY,u=process.env.OPENAI_API_KEY;async function d(e,{params:t}){try{let{currentDescription:r}=await e.json(),[o,s]=await Promise.all([p.Q.getProjects(),p.Q.getProjectTasks(t.projectId)]),i=o.find(e=>e.id===t.projectId);if(!i)return a.NextResponse.json({error:"Project not found"},{status:404});let n=s.filter(e=>!e.content.startsWith("* ")).slice(0,10).map(e=>`â€¢ ${e.content}`).join("\n"),d=`Generate a concise project description for the Todoist project "${i.name}".

Current Description: ${r||"None"}

Recent Tasks in this Project:
${n||"No tasks yet"}

Write a 1-2 sentence description that captures the purpose and scope of this project. Be specific and actionable. Focus on what this project is about, not what it will accomplish.

Respond with only the suggested description text, nothing else.`,l="";if(c)try{let e=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":c,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:"claude-3-haiku-20240307",max_tokens:200,messages:[{role:"user",content:d}]})});if(e.ok){let t=await e.json();l=t.content?.[0]?.text?.trim()||""}}catch(e){console.error("Anthropic API error:",e)}if(!l&&u)try{let e=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${u}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:d}],max_tokens:200,temperature:.3})});if(e.ok){let t=await e.json();l=t.choices?.[0]?.message?.content?.trim()||""}}catch(e){console.error("OpenAI API error:",e)}if(!l)return a.NextResponse.json({error:"Failed to generate suggestion. Please check your API keys."},{status:500});return a.NextResponse.json({suggestion:l})}catch(e){return console.error("Error generating project description suggestion:",e),a.NextResponse.json({error:"Failed to generate suggestion"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/projects/[projectId]/suggest-description/route",pathname:"/api/projects/[projectId]/suggest-description",filename:"route",bundlePath:"app/api/projects/[projectId]/suggest-description/route"},resolvedPagePath:"/Users/mimen/Documents/GitHub/todoist-mcp/todoist-inbox-processor/app/api/projects/[projectId]/suggest-description/route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:h,workUnitAsyncStorage:x,serverHooks:g}=l;function j(){return(0,n.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:x})}},846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1630:e=>{e.exports=require("http")},1820:e=>{e.exports=require("os")},2412:e=>{e.exports=require("assert")},3033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},3873:e=>{e.exports=require("path")},3997:e=>{e.exports=require("tty")},4075:e=>{e.exports=require("zlib")},4735:e=>{e.exports=require("events")},4870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},5511:e=>{e.exports=require("crypto")},5591:e=>{e.exports=require("https")},7910:e=>{e.exports=require("stream")},8354:e=>{e.exports=require("util")},9021:e=>{e.exports=require("fs")},9294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},9551:e=>{e.exports=require("url")}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[447,580,204,359],()=>r(604));module.exports=o})();